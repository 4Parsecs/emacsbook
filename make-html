#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

load 'make-html-common'

def usage
	puts <<USAGE
Usage:
  make-html [markdown]

Options:
  -d, --debug   : debuging
USAGE
	exit
end

# re-generate all if nothing
if ARGV.empty?
  $DEBUG = true
  Dir["#$here/chap*/doc.markdown"].each do |file|
    ARGV.push(file)
  end
end

figures do
  config = $config['default'].merge($config["ko"])

  ARGV.sort.map do |file|
    markdown = File.read(file)
    print "\tParsing markdown #{file}\n" if $DEBUG

    info = {
      "title" => "",
      "abstract" => "",
    }
    
    html = pipe("pandoc -f markdown -t json \
                    | runhaskell #$here/script/pygments.hs \
                    | pandoc -s -p --no-wrap -f json -t html \
                       --template=#$here/html/template-pandoc.html") do |stdin, stdout, stderr|

      # extract info
      info.each_key do |key|
        blob = markdown.scan(/^% #{key}:(.*)/).join
        blob.gsub("\n", "")
        info[key] = blob
      end

      stdin.write(pre_pandoc(markdown, config))
      stdin.close
      post_pandoc(stdout.read, config)
    end

    unless html
      puts "Got error on executing pondoc"
      exit 1
    end
    
    chap = /chap(\d+)/.match(file)[1]
    date = html_mtime(chap)
    File.open("#$here/html/chap#{chap}.html", 'w') do |file|
      template = $chap_template.result(binding)
      file.write($base_template.result(binding))
    end
  end
end
